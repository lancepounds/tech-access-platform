Update config.py with JWT and secret settings
open config.py
insert under SUPABASE_KEY:
    
    # Secret key for session & JWT signing
    SECRET_KEY      = os.getenv("SECRET_KEY")
    JWT_SECRET_KEY  = os.getenv("SECRET_KEY")  # reuse the same
    JWT_TOKEN_LOCATION = ["headers"]
    JWT_HEADER_NAME    = "Authorization"
    JWT_HEADER_TYPE    = "Bearer"

# 2) Initialize Bcrypt & JWT in your app factory
open app/__init__.py
inside create_app(), after you init supabase add:

    from flask_bcrypt import Bcrypt
    from flask_jwt_extended import JWTManager

    # initialize extensions
    bcrypt = Bcrypt(app)
    jwt    = JWTManager(app)

    # attach to app context if you like
    app.bcrypt = bcrypt
    app.jwt    = jwt

# 3) Create an auth blueprint
create file app/auth.py and add:

    from flask import Blueprint, request, jsonify, current_app as app
    from werkzeug.exceptions import BadRequest, Unauthorized
    from flask_jwt_extended import create_access_token
    import bcrypt  # or use app.bcrypt

    auth_bp = Blueprint("auth", __name__, url_prefix="/auth")

    @auth_bp.route("/register", methods=["POST"])
    def register():
        data = request.get_json() or {}
        email = data.get("email")
        pwd   = data.get("password")
        role  = data.get("role")
        if not email or not pwd or role not in ("member","company"):
            raise BadRequest("email, password, and role (member/company) required")
        pw_hash = app.bcrypt.generate_password_hash(pwd).decode()
        resp = app.supabase.table("users").insert({
            "email": email,
            "password_hash": pw_hash,
            "role": role
        }).execute()
        if resp.error:
            return jsonify({"msg": resp.error.message}), 400
        return jsonify({"msg":"user created"}), 201

    @auth_bp.route("/login", methods=["POST"])
    def login():
        data = request.get_json() or {}
        email = data.get("email"); pwd = data.get("password")
        if not email or not pwd:
            raise BadRequest("email and password required")
        result = app.supabase.table("users").select("*").eq("email", email).single().execute()
        user = result.data
        if result.error or not user:
            raise Unauthorized("invalid credentials")
        if not app.bcrypt.check_password_hash(user["password_hash"], pwd):
            raise Unauthorized("invalid credentials")
        token = create_access_token(identity=user["id"], additional_claims={"role": user["role"]})
        return jsonify(access_token=token), 200

# 4) Register the blueprint
open app/__init__.py
after create_app() has been defined, add:

    from .auth import auth_bp
    app.register_blueprint(auth_bp)

# 5) Save and restart your repl

# 6) Test with curl or Postman:
#    POST /auth/register  { "email":"foo@bar.com","password":"pass","role":"member" }
#    POST /auth/login     { "email":"foo@bar.com","password":"pass" }